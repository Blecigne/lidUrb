QSM[,parent_ID := 0]
QSM[,parent_ID := FNN::knnx.index(data = QSM[,4:6],query = QSM[,1:3], algorithm = "kd_tree", k = 1)]
QSM[cyl_ID == parent_ID,parent_ID := 0]
# compute total length bared by each cylinder
QSM[, bear_length := 0]
for(s in rev(sort(QSM$cyl_ID))){
childs = QSM[cyl_ID == s | parent_ID == s]
QSM[cyl_ID == s, bear_length := length+sum(childs$bear_length)]
}
## the axis follows the longest bear_length
QSM[, axis_ID := 0]
cur_seg = QSM[parent_ID == 0] # start with the trunk base
cur_ID = 1 # curent axis ID
cur_sec = 1 # curent section (for segment computation)
QSM[parent_ID == 0, axis_ID := cur_ID]
queue = c()
while(min(QSM$axis_ID)==0){
childs = QSM[cyl_ID == cur_seg$cyl_ID,section := cur_sec]
childs = QSM[parent_ID == cur_seg$cyl_ID]
if(nrow(childs) >= 1){
# if only one child -> it's in the same axis
if(nrow(childs) == 1){
QSM[cyl_ID == childs$cyl_ID, axis_ID := cur_ID]
cur_seg = childs
}
# if more than one child -> the one that bare longest structure belongs
# to the same axis, the other ones goes to the queue
if(nrow(childs) > 1){
QSM[cyl_ID == childs$cyl_ID[which.max(childs$bear_length)], axis_ID := cur_ID]
cur_seg = childs[which.max(childs$bear_length),]
queue = c(queue , childs$cyl_ID[-which.max(childs$bear_length)])
cur_sec = cur_sec + 1
}
}else{
# if there is no child -> pick the first one in the queue and increment cur_ID
cur_ID = cur_ID + 1 # increment cur_ID
cur_seg = QSM[cyl_ID == queue[1]] # select curent segment
QSM[cyl_ID == cur_seg$cyl_ID, axis_ID := cur_ID]
queue = queue[-1]
cur_sec = cur_sec + 1
}
}
# ADD BRANCHING ORDER
cur_BO = QSM[QSM$axis_ID == 1] # axes of branching order 1
QSM[axis_ID == 1,branching_order := 1]
BO = 2 # first branching order to detect
while(nrow(cur_BO)>0){
# find all child axes of the axes of the curent BO
child_axes=QSM[parent_ID %in% cur_BO$cyl_ID &
!(axis_ID %in% unique(cur_BO$axis_ID)),c(axis_ID)]
# add the new BO to the child axes
QSM[axis_ID %in% child_axes,branching_order := BO]
# select the child axes for the next round
cur_BO = QSM[QSM$axis_ID %in% child_axes]
BO = BO+1
}
QSM
Branching_order_metrics = QSM[,.(sum(length),sum(volume)),by = branching_order]
data.table::setnames(Branching_order_metrics,c("branching_order","total_length","total_volume"))
Axes_metrics = QSM[,.(sum(length),sum(volume)),by = axis_ID]
data.table::setnames(Axes_metrics,c("axis_ID","total_length","total_volume"))
Axes_metrics
library(lidUrb)
# compute qsm topology
qsm = lidUrb::qsm_topology(qsm)
qsm$Branching_order_metrics
qsm$Axes_metrics
data.table::data.table(list(qsm$DBH,qsm$Volume,qsm$Length))
data.table::data.table(c(qsm$DBH,qsm$Volume,qsm$Length))
data.table::data.table(c("DBH","Tree_volume","Tree_length"),c(qsm$DBH,qsm$Volume,qsm$Length))
data.table::data.table(metric = c("DBH_(m)","Tree_volume_(m3)","Tree_length_(m)"),value = c(qsm$DBH,qsm$Volume,qsm$Length))
Morpho::mesh2obj
rgl::shade3d(qsm$mesh,col=rep(qsm$qsm$branching_order,each=20),meshColor = "faces",add=T)
qsm
file = system.file("extdata", "adtree_qsm.obj", package="lidUrb")
mesh = Morpho::obj2mesh(file)
# import obj as mesh
mesh = Morpho::obj2mesh(obj_dir)
# transform the adTree mesh into a qsm file, simplify the mesh and compute
# some woody structure features
qsm = lidUrb::adtree2qsm(mesh,min_diameter = diameter_threshold)
diameter_threshold = 0.01
# transform the adTree mesh into a qsm file, simplify the mesh and compute
# some woody structure features
qsm = lidUrb::adtree2qsm(mesh,min_diameter = diameter_threshold)
# compute qsm topology
qsm = lidUrb::qsm_topology(qsm)
rgl::shade3d(qsm$mesh,col=rep(qsm$QSM$branching_order,each=20),meshColor = "faces",add=T)
rgl::shade3d(qsm$mesh,col=rep(qsm$QSM$branching_order,each=20),meshColor = "faces",add=T)
rgl::writeOBJ("test.obj")
library(lidUrb)
library(lidUrb)
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file)
# index for final sorting
las@data[,index := 1:nrow(las@data)]
las_sub = las
las_sub = lidUrb::filter_noise(las_sub,k = 6L, sigma = 0.8)
# reduce point density
las_sub = lidUrb::reduce_point_density(las_sub,0.02, keep_points = TRUE)
# add pts.grp for final matching
las@data[las_sub@data$index,pts.grp := las_sub@data$pts.grp]
las_sub@data = las_sub@data[is.low.density == 1]
# compute two criterias for wood and leaves classification
las_sub = lidUrb::LW_segmentation_dbscan(las_sub)
las_sub@data[,wood := as.numeric(p_wood >= 0.95)]
las_sub@data
# add the tree ID to the original data
data.table::setkey(las@data,pts.grp)
data.table::setkey(las_sub@data,pts.grp)
las@data[las_sub@data,':='(p_wood = p_wood,SoD = SoD, wood = wood)]
las@data
# remove temporary table
rm(las_sub)
# sort to make sure the data is in the same order than original file
las@data = las@data[order(index)]
las@data[,':='(index = NULL, pts.grp = NULL)]
las@data
las@data
lidR::writeLAS(las,paste("test_LW_class.las",sep=""))
las = lidR::readLAS("test_LW_class.las",)
las@data
# read the las
las = lidR::readLAS(las_dir)
# index for final sorting
las@data[,index := 1:nrow(las@data)]
las_sub = las
las_sub = lidUrb::filter_noise(las_sub,k = 6L, sigma = 0.8)
# reduce point density
las_sub = lidUrb::reduce_point_density(las_sub,0.02, keep_points = TRUE)
# add pts.grp for final matching
las@data[las_sub@data$index,pts.grp := las_sub@data$pts.grp]
las_sub@data = las_sub@data[is.low.density == 1]
# compute two criterias for wood and leaves classification
las_sub = lidUrb::LW_segmentation_dbscan(las_sub)
las_sub@data[,wood := as.numeric(p_wood >= 0.95)]
# add the tree ID to the original data
data.table::setkey(las@data,pts.grp)
data.table::setkey(las_sub@data,pts.grp)
las@data[las_sub@data,':='(p_wood = p_wood,SoD = SoD, wood = wood)]
# sort to make sure the data is in the same order than original file
las@data = las@data[order(index)]
las@data[,':='(index = NULL, pts.grp = NULL)]
las@data
las@data[is.noise,':='(p_wood = 0, SoD = 0,wood = -1)]
las@data[is.noise == TRUE,':='(p_wood = 0, SoD = 0,wood = -1)]
lidR::plot(las,color="wood")
lidR::writeLAS(las,paste("test_LW_class.las",sep=""))
las = lidR::readLAS("test_LW_class.las",)
las@data
# read the las
las = lidR::readLAS(las_dir)
# index for final sorting
las@data[,index := 1:nrow(las@data)]
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file)
# index for final sorting
las@data[,index := 1:nrow(las@data)]
# filter noise
las_sub = las
las_sub = lidUrb::filter_noise(las_sub,k = 6L, sigma = 0.8)
# reduce point density
las_sub = lidUrb::reduce_point_density(las_sub,0.02, keep_points = TRUE)
# add pts.grp for final matching
las@data[las_sub@data$index,pts.grp := las_sub@data$pts.grp]
las_sub@data = las_sub@data[is.low.density == 1]
# compute two criterias for wood and leaves classification
las_sub = lidUrb::LW_segmentation_dbscan(las_sub)
las_sub@data[,wood := as.numeric(p_wood >= 0.95)]
# add the tree ID to the original data
data.table::setkey(las@data,pts.grp)
data.table::setkey(las_sub@data,pts.grp)
las@data[las_sub@data,':='(p_wood = p_wood,SoD = SoD, wood = wood)]
las@data
las@data = las@data[order(index)]
las@data[,':='(index = NULL, pts.grp = NULL)]
las@data[is.noise == TRUE,':='(p_wood = 0, SoD = 0,wood = -1)]
las@data
lidR::add_attribute(las)
lidR::add_attribute(las = las,x = c("is.noise","p_wood", "SoD", "wood"))
lidR::add_attribute(las = las,x = c("is.noise","p_wood", "SoD", "wood"),name = c("is.noise","p_wood", "SoD", "wood"))
las@data
las@data[,':='(index = NULL, pts.grp = NULL,D := NULL)]
lidR::LAS(las@data)
test = lidR::LAS(las@data)
test@data
lidR::writeLAS(lidR::LAS(las@data),paste("test_LW_class.laz",sep=""))
las = lidR::readLAS("test_LW_class.las",)
las@data
las = lidR::readLAS("test_LW_class.laz",)
las@data
las = lidR::readLAS("test_LW_class.laz")
las@data
las@data
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file)
# filter noise
las_sub = las
las_sub = lidUrb::filter_noise(las_sub,k = 6L, sigma = 0.8)
# reduce point density
las_sub = lidUrb::reduce_point_density(las_sub,0.02, keep_points = TRUE)
# add pts.grp for final matching
las@data[las_sub@data$index,pts.grp := las_sub@data$pts.grp]
las_sub@data = las_sub@data[is.low.density == 1]
# compute two criterias for wood and leaves classification
las_sub = lidUrb::LW_segmentation_dbscan(las_sub)
las_sub@data[,wood := as.numeric(p_wood >= 0.95)]
# add the tree ID to the original data
data.table::setkey(las@data,pts.grp)
data.table::setkey(las_sub@data,pts.grp)
las@data[las_sub@data,':='(p_wood = p_wood,SoD = SoD, wood = wood)]
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file)
las_sub = las
las_sub = lidUrb::filter_noise(las_sub,k = 6L, sigma = 0.8)
# reduce point density
las_sub = lidUrb::reduce_point_density(las_sub,0.02, keep_points = TRUE)
# add pts.grp for final matching
las@data[las_sub@data$index,pts.grp := las_sub@data$pts.grp]
las_sub@data = las_sub@data[is.low.density == 1]
las_sub@data
las@data
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file)
las_sub = las
las_sub = lidUrb::filter_noise(las_sub,k = 6L, sigma = 0.8)
# reduce point density
las_sub = lidUrb::reduce_point_density(las_sub,0.02, keep_points = TRUE)
# add pts.grp for final matching
las@data[las_sub@data$index,pts.grp := las_sub@data$pts.grp]
las_sub@data = las_sub@data[is.low.density == 1]
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file)
las
# index for final sorting
las@data[,index := 1:nrow(las@data)]
las_sub = las
las_sub = lidUrb::filter_noise(las_sub,k = 6L, sigma = 0.8)
# reduce point density
las_sub = lidUrb::reduce_point_density(las_sub,0.02, keep_points = TRUE)
las_sub@data$index
# add pts.grp for final matching
las@data[las_sub@data$index,pts.grp := las_sub@data$pts.grp]
las_sub@data
las_sub@data = las_sub@data[is.low.density == 1]
las_sub@data
# compute two criterias for wood and leaves classification
las_sub = lidUrb::LW_segmentation_dbscan(las_sub)
las_sub@data[,wood := as.numeric(p_wood >= 0.95)]
las = lidR::add_lasattribute(las,name = c("p_wood","SoD","wood"))
las = lidR::add_lasattribute(las,name = "p_wood")
las = lidR::add_lasattribute(las,name = "p_wood",desc = "wood prob indice 1")
# compute two criterias for wood and leaves classification
las_sub = lidUrb::LW_segmentation_dbscan(las_sub)
las_sub@data[,wood := as.numeric(p_wood >= 0.95)]
# add the tree ID to the original data
data.table::setkey(las@data,pts.grp)
data.table::setkey(las_sub@data,pts.grp)
las@data[las_sub@data,':='(p_wood = p_wood,SoD = SoD, wood = wood)]
# remove temporary table
rm(las_sub)
# sort to make sure the data is in the same order than original file
las@data = las@data[order(index)]
las@data[,':='(index = NULL, pts.grp = NULL,D := NULL)]
las@data[is.noise == TRUE,':='(p_wood = 0, SoD = 0,wood = -1)]
las@data[,':='(index = NULL, pts.grp = NULL,D = NULL)]
las@data[is.noise == TRUE,':='(p_wood = 0, SoD = 0,wood = -1)]
las = lidR::add_lasattribute(las,name = "p_wood",desc = "wood prob indice 1")
las = lidR::add_lasattribute(las,name = "SoD",desc = "wood prob indice 2")
las = lidR::add_lasattribute(las,name = "wood",desc = "wood = 1, leaves = 0")
las = lidR::readLAS("test_LW_class.laz")
test = lidR::LAS(las@data)
las = lidR::readLAS("test_LW_class.laz")
las@data
lidR::plot(las,color="wood")
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file)
# index for final sorting
las@data[,index := 1:nrow(las@data)]
las_sub = las
las_sub = lidUrb::filter_noise(las_sub,k = 6L, sigma = 0.8)
# reduce point density
las_sub = lidUrb::reduce_point_density(las_sub,0.02, keep_points = TRUE)
# add pts.grp for final matching
las@data[las_sub@data$index,pts.grp := las_sub@data$pts.grp]
las_sub@data = las_sub@data[is.low.density == 1]
# compute two criterias for wood and leaves classification
las_sub = lidUrb::LW_segmentation_dbscan(las_sub)
las_sub@data[,wood := as.numeric(p_wood >= 0.95)]
# add the tree ID to the original data
data.table::setkey(las@data,pts.grp)
data.table::setkey(las_sub@data,pts.grp)
las@data[las_sub@data,':='(p_wood = p_wood,SoD = SoD, wood = wood)]
# remove temporary table
rm(las_sub)
# sort to make sure the data is in the same order than original file
las@data = las@data[order(index)]
las@data[,':='(index = NULL, pts.grp = NULL,D = NULL)]
las@data[is.noise == TRUE,':='(p_wood = 0, SoD = 0,wood = -1)]
las = lidR::add_lasattribute(las,name = "p_wood",desc = "wood prob indice 1")
las = lidR::add_lasattribute(las,name = "SoD",desc = "wood prob indice 2")
las = lidR::add_lasattribute(las,name = "wood",desc = "wood = 1, leaves = 0")
lidR::writeLAS(las,paste("test_LW_class.laz",sep=""))
las = lidR::readLAS("test_LW_class.laz")
las@data
las@data[,is.noise := as.numeric(is.noise)]
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file)
# index for final sorting
las@data[,index := 1:nrow(las@data)]
las_sub = las
las_sub = lidUrb::filter_noise(las_sub,k = 6L, sigma = 0.8)
# reduce point density
las_sub = lidUrb::reduce_point_density(las_sub,0.02, keep_points = TRUE)
# add pts.grp for final matching
las@data[las_sub@data$index,pts.grp := las_sub@data$pts.grp]
las_sub@data = las_sub@data[is.low.density == 1]
# compute two criterias for wood and leaves classification
las_sub = lidUrb::LW_segmentation_dbscan(las_sub)
# default wood classification
las_sub@data[,wood := as.numeric(p_wood >= 0.95)]
# add the tree ID to the original data
data.table::setkey(las@data,pts.grp)
data.table::setkey(las_sub@data,pts.grp)
las@data[las_sub@data,':='(p_wood = p_wood,SoD = SoD, wood = wood)]
# remove temporary table
rm(las_sub)
# sort to make sure the data is in the same order than original file
las@data = las@data[order(index)]
las@data[,':='(index = NULL, pts.grp = NULL)]
las@data
las@data
las@data[,is.noise := as.numeric(is.na(wood))]
las@data
# import the data
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file)
# import the data
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file)
# filter noise
las = lidUrb::filter_noise(las,k = 6L,sigma = 0.8)
# segment foliage
las = lidUrb::LW_segmentation_dbscan(las)
las@data[,wood := as.numeric(p_wood >= 0.9)]
# compute leaves traits
leaves = lidUrb::leaves_traits(las@data[wood == 0])
leaves
metrics_tab
metrics_tab = data.table::data.table(metric = c("Leaf_Area_Index","Total_leaf_area_(m2)"),value = c(leaves$LAI,leaves$TLA))
metrics_tab
library(lidUrb)
library(lidUrb)
library(lidUrb)
leaves$LAD_profile
las_dir
library(lidUrb)
library(lidUrb)
las_dir = caca.las
paste(strsplit(las_dir,".las"),"_LAD_profile.txt",sep="")
las_dir = "caca.las"
paste(strsplit(las_dir,".las"),"_LAD_profile.txt",sep="")
library(lidUrb)
library(lidUrb)
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file,select = "xyz")
# filter noise
original = las
original@data[,original_index := 1:nrow(las@data)]
las = lidUrb::reduce_point_density(original,0.02)
las = lidUrb::filter_noise(las)
#lidR::plot(las,color="is.noise")
subset = las
#subset@data = subset@data[is.low.density == 1, is.noise := 0]
# segment leaves
las = lidUrb::LW_segmentation_dbscan(las)
las@data[,wood := as.numeric(p_wood >= 0.95)] # binary class (0 for leaves, 1 for wood)
# compute green crown volume
GCV = lidUrb::green_crown_volume(las)
# plot the green crown mesh over the original LAS
lidR::plot(las,color="wood",size=2,colorPalette = c("chartreuse4","cornsilk2"),clear_artifacts = FALSE)
rgl::shade3d(GCV$mesh,col = "chartreuse4",add=T)
library(lidUrb)
install.packages("Rvcg")
library(lidUrb)
GCV$mesh
rgl::shade3d(GCV$mesh)
devtools::check(run_dont_test = FALSE, cran = FALSE)
library(lidUrb)
devtools::check(run_dont_test = FALSE, cran = FALSE)
install.packages("TreeLS")
devtools::build_manual()
devtools::build_manual()
file = system.file("extdata", "tree_leaves.las", package="lidUrb")
las = lidR::readLAS(file,select = "xyz")
# filter noise
original = las
original@data[,original_index := 1:nrow(las@data)]
# filter noise and reduce point density
las = lidUrb::reduce_point_density(original,0.02)
las = lidUrb::filter_noise(las)
# segment leaves
las = lidUrb::LW_segmentation_dbscan(las)
las@data[,wood := as.numeric(p_wood >= 0.95)] # binary class (0 for leaves, 1 for wood)
# compute green crown volume
GCV = lidUrb::green_crown_volume(las)
mesh = GCV$mesh
mesh$material
# import the obj file output from adTree
file = system.file("extdata", "adtree_qsm.obj", package="lidUrb")
mesh = Morpho::obj2mesh(file)
# transform the adTree mesh into a qsm file, simplify the mesh and compute
# some woody structure features
qsm = lidUrb::adtree2qsm(mesh)
# compute qsm topology
qsm$qsm = lidUrb::qsm_topology(qsm$qsm)
qsm
# compute qsm topology
qsm = lidUrb::qsm_topology(qsm)
rgl::open3d()
rgl::shade3d(qsm$mesh,col=rep(qsm$qsm$branching_order,each=20),meshColor = "faces",add=T)
rgl::shade3d(qsm$mesh,col=rep(qsm$QSM$branching_order,each=20),meshColor = "faces",add=T)
mesh = qsm$mesh
mesh$material = list(Branching_order = rep(qsm$QSM$branching_order,each=20))
Rvcg::vcgObjWrite(kesh,"test_mesh_color")
Rvcg::vcgObjWrite(mesh,"test_mesh_color")
rgl::mesh3d(vertices = mesh$vb, points = mesh$it)
test = rgl::mesh3d(vertices = mesh$vb, points = mesh$it)
rgl::shade3d(test)
test = rgl::mesh3d(vertices = mesh$vb, triangles = mesh$it)
rgl::shade3d(test)
test = rgl::mesh3d(vertices = mesh$vb, triangles = mesh$it, material = rep(qsm$QSM$branching_order,each=20))
qsm$QSM$branching_order
test = rgl::mesh3d(vertices = mesh$vb, triangles = mesh$it, material = list(rep(color = qsm$QSM$branching_order,each=20)))
test = rgl::mesh3d(vertices = mesh$vb, triangles = mesh$it, material = list(color = rep(qsm$QSM$branching_order,each=20)))
rgl::shade3d(test)
test = rgl::mesh3d(vertices = mesh$vb, triangles = mesh$it, material = list(color = rep(qsm$QSM$branching_order,each=20)),meshColor = "faces")
rgl::shade3d(test)
Rvcg::vcgObjWrite(test,"test_mesh_color")
library(lidUrb)
library(lidUrb)
file = system.file("extdata", "four_trees.las", package="lidUrb")
las = lidR::readLAS(file)
# reduce point density to 0.1 instead of voxelisation as in Wang et al.
las = lidUrb::reduce_point_density(las,0.1)
# build a knn graph
KNN = lidUrb::knn_graph(las,local_filter = 0.5)
KNN = lidUrb::highly_connected_graph(KNN)
# run the downward clustering following the hybrid graph, parameters are
# guessed after Wang et al. paper
las_sub=lidUrb::wang_clustering(las=las,
graph=KNN,
heigth_th_merge_roots = 1,
distance_th_merge_close_roots = 1)
# plot the result
lidR::plot(las_sub,color="cluster_wang")
# run the downward clustering following the hybrid graph, parameters are
# guessed after Wang et al. paper
las_sub=lidUrb::wang_clustering(las=las,
graph=KNN,
heigth_th_merge_roots = 1,correct_elevation = T
distance_th_merge_close_roots = 1)
file = system.file("extdata", "four_trees.las", package="lidUrb")
las = lidR::readLAS(file)
# reduce point density to 0.1 instead of voxelisation as in Wang et al.
las = lidUrb::reduce_point_density(las,0.1)
# build a knn graph
KNN = lidUrb::knn_graph(las,local_filter = 0.5)
KNN = lidUrb::highly_connected_graph(KNN)
# run the downward clustering following the hybrid graph, parameters are
# guessed after Wang et al. paper
las_sub=lidUrb::wang_clustering(las=las,
graph=KNN,
heigth_th_merge_roots = 1,
correct_elevation = T,
distance_th_merge_close_roots = 1)
# plot the result
lidR::plot(las_sub,color="cluster_wang")
trest = las@data[Z <= Z-min(Z)]
rgl::plot3d(trest)
trest
las@data[Z <= Z-min(Z)]
las@data
trest = las@data[Z <= (Z-min(Z))+2]
trest = las@data[Z <= min(Z)+2]
rgl::plot3d(trest)
rgl::plot3d(trest,add=T)
trest[,cl := dbscan::dbscan(trest[,.(X,Y)],eps = 2,minPts = 1)$cluster]
rgl::plot3d(trest,col=trest$cl,add=T)
trest[,cl := dbscan::dbscan(trest[,.(X,Y)],eps = 3,minPts = 1)$cluster]
rgl::plot3d(trest,col=trest$cl,add=T)
library(lidUrb)
file = system.file("extdata", "four_trees.las", package="lidUrb")
las = lidR::readLAS(file)
# reduce point density to 0.1 instead of voxelisation as in Wang et al.
las = lidUrb::reduce_point_density(las,0.1)
trest = las@data[Z <= min(Z)+2]
trest[,cl := dbscan::dbscan(trest[,.(X,Y)],eps = 3,minPts = 1)$cluster]
rgl::plot3d(trest,col=trest$cl,add=T)
# build a knn graph
KNN = lidUrb::knn_graph(las,local_filter = 0.5)
KNN = lidUrb::highly_connected_graph(KNN)
# run the downward clustering following the hybrid graph, parameters are
# guessed after Wang et al. paper
las_sub=lidUrb::wang_clustering(las=las,
graph=KNN,
heigth_th_merge_roots = 1,
correct_elevation = T,
distance_th_merge_close_roots = 1)
# plot the result
lidR::plot(las_sub,color="cluster_wang")
library(lidUrb)
